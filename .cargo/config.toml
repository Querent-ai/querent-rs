# Global lint rules. This will keep rust analyser in sync with the clippy
# lints so every tool has the same view.
#
# Rustc Lints: https://doc.rust-lang.org/rustc/lints/index.html
# Clippy Lints: https://rust-lang.github.io/rust-clippy/master/index.html
# Substrate flags: https://github.com/paritytech/substrate/blob/master/.cargo/config.toml
#
# If you want standard clippy run:
# RUSTFLAGS= cargo clippy
[env]
PYO3_CONFIG_FILE = { value = "querent-synapse/pyembedded/pyo3-build-config-file.txt", relative = true }

# Mac OS libraries
[target.x86_64-apple-darwin]
rustflags = ["-lz", "-lbz2", "-llzma", "-C", "link-args=-framework AudioUnit"]

# Windows static build
[target.stable-x86_64-pc-windows-msvc]
rustflags = ["-Ctarget-feature=+crt-static"]

# Use ldd for faster compile on Linux
[target.x86_64-unknown-linux-gnu]
rustflags = ["-C", "link-arg=-fuse-ld=lld"]

[target.'cfg(feature = "cargo-clippy")']
rustflags = [
	# Clippy lint groups
	"-Aclippy::all",
	"-Dclippy::complexity",
	"-Dclippy::correctness",
	# Clippy individual lints
	"-Aclippy::if_same_then_else",
	"-Aclippy::zero_prefixed_literal",
	"-Aclippy::type_complexity",
	"-Aclippy::nonminimal_bool",
	"-Aclippy::borrowed-box",
	"-Aclippy::too_many_arguments",
	"-Aclippy::unnecessary_cast",
	"-Aclippy::identity_op",
	"-Aclippy::useless_conversion",
	"-Aclippy::unit_arg",
	"-Aclippy::option_map_unit_fn",
	"-Aclippy::bind_instead_of_map",
	"-Aclippy::erasing_op",
	"-Aclippy::eq_op",
	"-Aclippy::while_immutable_condition",
	"-Aclippy::needless_option_as_deref",
	"-Aclippy::derivable_impls",
	"-Aclippy::bool_assert_comparison",
	# Built-in lint groups
	"-Asuspicious_double_ref_op",
	"-Dnonstandard-style",
	"-Dunused",
	# Built-in individual lints
	# "-D<rustc_lint_name>",
]
